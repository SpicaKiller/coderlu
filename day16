104. 二叉树的最大深度
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root == nullptr) return 0;
        int depth = 0;
        queue<TreeNode*> que;
        que.push(root);
        while(!que.empty()){
            int size = que.size();
            depth++;
            for(int i = 0; i < size; i++){
                TreeNode* node = que.front();
                que.pop();
                if(node -> left) que.push(node -> left);
                if(node -> right) que.push(node -> right);
            }            
        }
        return depth;
    }
};

111. 二叉树的最小深度
class Solution {
public:
    int getDepth(TreeNode* node){
        if(node == nullptr) return 0;
        int leftDepth = getDepth(node -> left);
        int rightDepth = getDepth(node -> right);

        if(node -> left == nullptr && node -> right != nullptr)
            return 1 + rightDepth;
        if(node -> left != nullptr && node -> right == nullptr)
            return 1 + leftDepth;
        int res = 1 + min(leftDepth, rightDepth);
        return res;
    }
    int minDepth(TreeNode* root) {
        return getDepth(root);
    }
};

222. 完全二叉树的节点个数
class Solution {
public:
    int countNodes(TreeNode* root) {
        queue<TreeNode*> que;
        int result = 0;
        if(root != nullptr) que.push(root);
        while(!que.empty()){
            int size = que.size();
            for(int i = 0; i < size; i++){
            TreeNode* node =  que.front();
            que.pop();
            result++;
            if(node -> left) que.push(node -> left);
            if(node -> right) que.push(node -> right);
            }
        }
        return result;
    }
};
