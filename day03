203. 移除链表元素
class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {
        ListNode* dummyHead = new ListNode(0);
        dummyHead -> next = head;
        ListNode* cur = dummyHead;
        while(cur -> next != nullptr){
            if(cur -> next -> val == val){
                ListNode* temp = cur -> next;
                cur -> next = cur -> next -> next;
                delete  temp;
            }else{
                cur = cur -> next;
            }
        }
        head = dummyHead -> next;
        delete dummyHead;
        return head;
    }
};

707. 设计链表
class MyLinkedList {
public:
    struct LinkedNode{
        int val;
        LinkedNode* next;
        LinkedNode(int val):val(val), next(nullptr){}
    };

    MyLinkedList(){
        _size = 0;
        _dummyHead = new LinkedNode(0);
    }

    int get(int index){
        if(index < 0 || index > (_size - 1)){
            return -1;
        }
        LinkedNode* cur = _dummyHead -> next;
        while(index--){
            cur = cur -> next;
        }
        return cur -> val;
    }

    void addAtHead(int val){
        LinkedNode* node = new LinkedNode(val);
        node -> next = _dummyHead -> next;
        _dummyHead -> next = node;
        _size++;
    }

    void addAtTail(int val){
        LinkedNode* node = new LinkedNode(val);
        LinkedNode* cur = _dummyHead;
        while(cur -> next!= nullptr){
            cur = cur -> next;
        }
        cur -> next = node;
        _size++;
    }

    void addAtIndex(int index, int val){
        if(index > _size) return;
        if(index < 0) index = 0;
        LinkedNode* node = new LinkedNode(val);
        LinkedNode* cur = _dummyHead; 
        while(index--){
            cur = cur -> next;
        }
        node -> next = cur -> next;
        cur -> next = node;
        _size++;
    }

    void deleteAtIndex(int index){
        if (index >= _size || index < 0) {
            return;
        }
        LinkedNode* cur = _dummyHead;
        while(index--) {
            cur = cur ->next;
        }
        LinkedNode* tmp = cur->next;
        cur->next = cur->next->next;
        delete tmp;
        _size--;
    }

        void printLinkedList() {
        LinkedNode* cur = _dummyHead;
        while (cur->next != nullptr) {
            cout << cur->next->val << " ";
            cur = cur->next;
        }
        cout << endl;
    }

private:
    LinkedNode* _dummyHead;
    int _size;

};

206.反转链表
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* pre = nullptr;
        ListNode* temp;
        ListNode* cur = head;
        while(cur){
            temp = cur -> next;
            cur -> next = pre;
            pre = cur;
            cur = temp;
        }

        return pre;
    }
};
