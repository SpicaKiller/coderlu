24. 两两交换链表中的节点
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        ListNode* dummyHead = new ListNode(0);
        dummyHead -> next = head;
        ListNode* cur = dummyHead;
        
        while(cur -> next != nullptr && cur -> next -> next != nullptr){
            ListNode* tmp1 = cur -> next;
            ListNode* tmp2 = cur -> next -> next -> next;

            cur -> next = cur -> next -> next;
            cur -> next -> next = tmp1;
            cur -> next -> next -> next = tmp2;

            cur = cur -> next -> next;
        }
        return dummyHead -> next;
    }
};

19. 删除链表的倒数第 N 个结点
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* dummyHead = new ListNode(0);
        dummyHead -> next = head;
        ListNode* slow = dummyHead;
        ListNode* fast = dummyHead;

        while(n-- && fast != nullptr){
            fast = fast -> next;
        }
        fast = fast -> next;
        while(fast != nullptr){
            fast = fast -> next;
            slow = slow -> next;
        }

        ListNode* tmp = slow -> next; 
        slow -> next = slow -> next -> next;
        delete tmp;

        return dummyHead -> next;
    }
};

面试题 02.07. 链表相交
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
      ListNode* curA = headA;
      ListNode* curB = headB;  
      int lenA = 0;
      int lenB = 0;

      while(curA != nullptr){
        lenA++;
        curA = curA -> next;
      }

      while(curB != nullptr){
        lenB++;
        curB = curB -> next;
      }
      curA = headA;
      curB = headB;

      if(lenB > lenA){
          swap(lenA, lenB);
          swap(curA, curB);
      }
      int gap = lenA - lenB;

      while(gap--){
          curA = curA -> next;
      }
      while(curA != nullptr){
          if(curB == curA){
              return curA;
          }
          curA = curA -> next;
          curB = curB -> next;
      }
      return nullptr;
    }
};

142. 环形链表 II
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast != nullptr && fast -> next != nullptr){
            slow = slow -> next;
            fast = fast -> next -> next;
            if(slow == fast){
                ListNode* index1 = fast;
                ListNode* index2 = head;
                while(index1 != index2){
                    index1 = index1 -> next;
                    index2 = index2 -> next;
                }
                return index2;
            }
        }
        return nullptr;
    }
};
