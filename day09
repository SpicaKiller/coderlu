28. 找出字符串中第一个匹配项的下标
class Solution {
public:
    void getNext(int* next, const string& s) {
        int j = -1;
        next[0] = j;
        for(int i = 1; i < s.size(); i++) { 
            while (j >= 0 && s[i] != s[j + 1]) { 
                j = next[j]; 
            }
            if (s[i] == s[j + 1]) { 
                j++;
            }
            next[i] = j; 
        }
    }
    int strStr(string haystack, string needle) {
        if (needle.size() == 0) {
            return 0;
        }
        int next[needle.size()];
        getNext(next, needle);
        int j = -1; 
        for (int i = 0; i < haystack.size(); i++) {
            while(j >= 0 && haystack[i] != needle[j + 1]) { 
                j = next[j];
            }
            if (haystack[i] == needle[j + 1]) { 
                j++; // i的增加在for循环里
            }
            if (j == (needle.size() - 1) ) { 
                return (i - needle.size() + 1);
            }
        }
        return -1;
    }
};

459.重复的子字符串
class Solution {
public:
    void getNext (int* next, const string& s){
        next[0] = -1;
        int j = -1;
        for(int i = 1;i < s.size(); i++){
            while(j >= 0 && s[i] != s[j + 1]) {
                j = next[j];
            }
            if(s[i] == s[j + 1]) {
                j++;
            }
            next[i] = j;
        }
    }
    bool repeatedSubstringPattern (string s) {
        if (s.size() == 0) {
            return false;
        }
        int next[s.size()];
        getNext(next, s);
        int len = s.size();
        if (next[len - 1] != -1 && len % (len - (next[len - 1] + 1)) == 0) {
            return true;
        }
        return false;
    }
};
